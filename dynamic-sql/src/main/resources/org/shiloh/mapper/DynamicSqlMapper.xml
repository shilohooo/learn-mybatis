<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    author: shiloh
    date: 2022/4/14 21:48
    description: 动态 SQL 示例 Mapper
 -->
<mapper namespace="org.shiloh.mapper.DynamicSqlMapper">
  <!--
    if 标签拼接动态 SQL，如果不传入 fuzzyName 参数，则 SQL 语句不会带有 and username like xxx 条件，如果传入的 fuzzyName为 null
    或者 空字符串，也不会拼接动态条件。

    choose、when、otherwise标签，用法类型 Java 的 switch 语句。
    当传入的 fuzzyUsername 参数不为 null 且不等于空字符串时，就按 username 模糊查询数据，否则就查询所有 username 不为 null 的数据

    where标签：在子元素返回任何内容的情况下才插入 where 子句，当第一个条件以 and 或 or 开头，where 标签也会将它们去除。
    使用该方式，无需再提前指定一个固定的 where 条件到 sql 语句中，然后在进行动态 sql 的拼接。

    trim标签：可以用于定制 where 标签的功能，在本例中，设置了前缀为 where，当 if 标签中的条件为 true 时，会在 sql 语句中拼接上 where 子句与条件，
    且会移除 prefixOverrides 属性匹配到的内容，在本例中会移除 and 或 or 关键字。
  -->
  <select id="findAllByDeptIdAndUsernameLike" parameterType="String" resultType="User">
    select id,
    username,
    password,
    sex,
    email,
    dept_id
    from t_user
    <!-- where dept_id = 1 -->
    <!--    <if test="fuzzyUsername != null and fuzzyUsername != ''">-->
    <!--      and username like concat('%', #{fuzzyUsername}, '%')-->
    <!--    </if>-->
    <!--    <choose>-->
    <!--      <when test="fuzzyUsername != null and fuzzyUsername != ''">-->
    <!--        and username like concat('%', #{fuzzyUsername}, '%')-->
    <!--      </when>-->
    <!--      <otherwise>-->
    <!--        and username is not null;-->
    <!--      </otherwise>-->
    <!--    </choose>-->
    <!--    <where>-->
    <!--      <if test="fuzzyUsername != null and fuzzyUsername != ''">-->
    <!--        username like concat('%', #{fuzzyUsername}, '%')-->
    <!--      </if>-->
    <!--    </where>-->
    <trim prefix="where" prefixOverrides="and|or">
      <if test="fuzzyUsername != null and fuzzyUsername != ''">
        <!-- 使用 bind 标签创建一个变量，并绑定到当前的上下文中 -->
        <bind name="pattern" value="'%' + fuzzyUsername + '%'"/>
        <!-- and username like concat('%', #{fuzzyUsername}, '%') -->
        and username like #{pattern}
      </if>
    </trim>
  </select>

  <!--
    set 标签：可用于构建动态更新数据的 sql 语句，用法如本例所示：
    只有当 set 标签中的 if 子标签的 test 属性值为 true 时，才会将相应的属性更新。
    set 标签会自动添加 set 关键字到 sql 中，且会移除多余的逗号，也可以使用 trim 标签 定义和 set 标签一样的功能：
    <trim prefix="set" suffixOverrides=",">
      if...
    </trim>
    值得注意的是这里使用了 trim 标签的 suffixOverrides 属性，用于移除 update 语句中多余的逗号。
  -->
  <update id="updateUser" parameterType="User">
    update t_user
    <set>
      <if test="username != null and username != ''">username = #{username},</if>
      <if test="password != null and password != ''">password = #{password},</if>
      <if test="sex != null">sex = #{sex},</if>
      <if test="email != null and email != ''">email = #{email}</if>
      <if test="deptId !== null and deptId > 0">dept_id = #{deptId}</if>
    </set>
    where id = #{id}
  </update>

  <select id="findAllByIdIn" parameterType="List" resultType="User">
    select
    id,
    username
    password,
    sex,
    email,
    dept_id
    from t_user
    <where>
      <!--
        动态 SQL 之：对集合参数进行遍历：
        使用 where 标签 加 foreach 标签，将集合参数作为查询条件：
        foreach 标签可以指定一个集合，声明可以在标签内使用的集合项（在本例中是 id ）和索引（在本例中是 index ）变量。
        还可以指定开头与结尾的字符串以及集合项迭代之间的分隔符（在本例中是逗号 , ）。
        可以将任何可迭代对象（比如：List、Set等）、Map 对象或者数组对象作为集合参数传递给 foreach 标签。
        当使用可迭代对象或者数组时，index属性声明的是当前迭代的索引序号，item属性声明的是本次迭代获取到的值。
        当使用 Map 对象（或者 Map.Entry 对象的集合）时，index属性声明的是 key，item属性则是value。

        foreach 标签的属性：
          - collection：声明集合参数的变量名称，在本例中对应接口方法的 ids 参数：
          List<User> findAllByIdIn(@Param("ids") Collection<Long> ids);

          - item：声明每次遍历集合获取到的元素的变量名称

          - index：当使用可迭代对象时，声明的是当前迭代的索引序号的变量名称，当使用 Map 或 Map.Entry 的集合时，
          声明的是当前的 key 的变量名称

          - open：声明包含集合项的开头字符串，在本例中需要使用 in 查询，所以开头字符串为 "id in ("。

          - close：声明包含集合项的结尾字符串，在本例中是一个右括号 ")"，使之与开头字符串中的左括号匹配。

          - separator：声明分割每个集合项的字符，在本例中使用的是逗号 ","，以逗号分割每个 id 。

          - nullable：是否为空开关，值为 true | false，如果设置为 true，MyBatis 会在遇到 null 时跳过，而不是抛出异常。

        本例最终生成的 SQL 语句示例如下：
        select * from t_user where id in (1, 2, 3, 4, 5);
      -->
      <foreach collection="ids" item="id" index="index" open="id in (" close=")" separator="," nullable="true">
        #{id}
      </foreach>
    </where>
  </select>
</mapper>