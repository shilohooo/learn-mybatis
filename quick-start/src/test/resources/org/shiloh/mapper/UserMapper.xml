<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
  命名空间的作用：
    1.利用更长的全限定名来将不同的语句隔离开来，同时也实现了接口绑定。
    2.只要将命名空间置于合适的 Java 包命名空间之中，代码会变得更加整洁，也有利于更方便地使用 MyBatis 。
-->
<mapper namespace="org.shiloh.mapper.UserMapper">
  <!--
    MyBatis SQL映射文件中的顶级元素（按定义顺序列出）：
      - cache：当前命名空间的缓存配置
      - cache-ref：引用其他命名空间的缓存配置
      - resultMap：描述如何从数据库结果中加载对象数据
      - sql：可被其他语句引用的可重用语句块
      - insert：映射插入语句
      - update：映射更新语句
      - delete：映射删除语句
      - select：映射查询语句
  -->
  <select id="findAll" resultType="User">
    select *
    from learn_mybatis3.t_user;
  </select>

  <!--
    id：SQL语句的在命名空间中的标识，应用接口方法名称保持一直
    parameterType：SQL语句接受的参数的类型
    resultType：执行该SQL语句后返回结果的类型
    #{id}：#{}为参数占位符，#{}占位符使用预处理语句（PreparedStatement）处理参数，在JDBC中，这样的一个参数在SQL
    中会由一个英文问号 ? 来标识，并被传递到一个新的预处理语句中，就像下面这样：
      final String sql = "select * from t_user where id = ?";
      final PreparedStatement ps = conn.prepareStatement(sql);
      ps.setInt(1, id);

    select元素还可以配置很多属性来决定查询语句的行为，具体请参考官方文档：
    https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#select
  -->
  <select id="findById" parameterType="Long" resultType="User">
    select *
    from learn_mybatis3.t_user
    where id = #{id}
  </select>
</mapper>